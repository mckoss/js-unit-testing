#summary Documentation for using the JavaScript unit test framework.

= Introduction =

Javascript unit tests can be collected together in one or more html files.  A master unit test can also run tests in a separate file and report the summary of the results.

= Formatting a Unit Test HTML file =

Unit test files contain collections of named tests.  Each test executes javascript code interspersed with Assert calls to verify the expected results.

The Unit test framework executes each of the tests in sequence, and displays the result within the test page.

Each unit test file is structured like this example:

{{{
<html>
<head>
<title>Example Unit Test</title>
<script src="unit.js"></script>
<body>
<h1><script>document.write(document.title);</script></h1>
<script>

function Sample()
{
	this.x = 1;
}

Sample.prototype.Double = function()
{
	this.x *= 2;
}

ts = new UT.TestSuite();
ts.DWOutputDiv();

ts.AddTest("All Pass", function(ut)
{
	var s = new Sample();
	ut.Assert(s.x == 1, "Constructor");
	s.Double();
	ut.Assert(s.x == 2, "Double Test 1");
	s.x = 10;
	s.Double();
	ut.Assert(s.x == 20, "Double Test 2");
	ut.AssertEval("1+1==2");
	ut.AssertGT(2, 1);
	ut.AssertGT("Z", "A");
});

ts.AddTest("All Fail", function(ut)
{
	ut.Assert(false);
	ut.AssertEval("1+1 == 3");
	ut.AssertEq(1, 2);
	ut.AssertNEq("hello", "hello");
	ut.AssertGT(1, 2);
	ut.AssertGT(undefined, 2);
	ut.AssertGT("A", "Z");
	var x = 7;
	ut.AssertFn(function () { return x != 7; });
	ut.AssertFn(new Function);
	ut.AssertFn(function () { });
	IllegalFunction();
});

ts.Run();
ts.Report();

</script>
</body>
</html>
}}}

This results in the following in-page report:
---
{{{
Unit Test Output

1. PASS [All Pass] 0 errors out of 6 tests
2. FAIL [All Fail] 11 errors out of 11 tests
Failed: 1. undefined
Failed: 2. 1+1 == 3
Failed: 3. 1 == 2 (type: number)
Failed: 4. hello != hello
Failed: 5. 1 > 2
Failed: 6. undefined > 2
Failed: 7. A > Z
Failed: 8. return x != 7;
Failed: 9.
Failed: 10.
Failed: 11. Exception: ReferenceError (IllegalFunction is not defined) @ line 49
Summary: 1 failures out of 2 tests.
}}}
---

=Unit Test (UT) Classes and Function=

*!TestSuite* - Class for creating a collection of unit tests.

*_Methods_*:

*!AddTest*("Test Name", function)

*Run*()

*Report*()

*_Example_*:

{{{
ts = new UT.TestSuite();
}}}

=Test Suite (TS)=

A TestSuite contains a collection of unit test functions.